{"version":3,"sources":["+state/actions.js","TodoItem.js","App.js","serviceWorker.js","+state/state.js","+state/store.js","+state/reducer.js","index.js"],"names":["actionsTypes","TodoItem","todo","index","dispatch","useDispatch","className","completed","label","onClick","type","payload","toggleCompleted","removeTodo","App","ref","createRef","todos","useSelector","state","onSubmit","event","preventDefault","stopPropagation","current","value","data-testid","required","placeholder","map","key","Boolean","window","location","hostname","match","initailState","store","createStore","action","filter","_","item","newItem","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAAaA,EACD,aADCA,EAEE,gBAFFA,EAGO,0BCAb,SAASC,EAAT,GAAkC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACtBC,EAAWC,cACjB,OAAO,yBAAKC,UAAU,0BACpB,uBAAGA,UAAS,UAAKJ,EAAKK,UAAY,8BAAgC,gBAAtD,aAAkFL,EAAKM,OACnG,4BAAQC,QAAS,kBAAML,EDSE,SAACD,GAAD,MAAY,CACzCO,KAAMV,EACNW,QAASR,GCX2BS,CAAgBT,KAASG,UAAS,yHAC9DJ,EAAKK,UAAqB,SAAT,QAErB,4BAAQE,QAAS,kBAAML,EDCH,SAACD,GAAD,MAAY,CACpCO,KAAMV,EACNW,QAASR,GCH2BU,CAAWV,KAASG,UAAU,4GAA9D,WCiDSQ,MApDf,WACE,IAAMV,EAAWC,cACXU,EAAMC,sBAINC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAa3C,OACE,yBAAKX,UAAU,IACb,yBAAKA,UAAU,4EACb,yBAAKA,UAAU,+DACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,qBAAd,aACA,0BAAMc,SAbhB,SAAqBC,GFbA,IAACb,EEkBpB,OAJAa,EAAMC,iBACND,EAAME,kBACNnB,GFhBoBI,EEgBHO,EAAIS,QAAQC,MFhBE,CACjCf,KAAMV,EACNW,QAASH,KEePO,EAAIS,QAAQC,MAAQ,IACb,GAQ8BnB,UAAU,aACrC,2BACES,IAAKA,EACLW,cAAY,aACZC,UAAQ,EACRrB,UAAU,4EACVsB,YAAY,aAEd,4BACElB,KAAK,SACLJ,UAAU,2GAFZ,SAQJ,6BACGW,EAAMY,KAAI,SAAC3B,EAAMC,GAChB,OAAO,kBAACF,EAAD,CAAU6B,IAAK5B,EAAKM,MAAQL,EAAOD,KAAMA,EAAMC,MAAOA,YCtCvD4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BClBOC,EAAe,CACxBnB,MAAO,ICGJ,IAAMoB,EAAQC,aCGd,WAAgD,IAA/BnB,EAA8B,uDAAtBiB,EAAcG,EAAQ,uCACpD,OAAQA,EAAO7B,MACb,KAAKV,EACH,MAAO,CACLiB,MAAM,GAAD,mBACAE,EAAMF,OADN,CAEH,CACET,MAAO+B,EAAO5B,QACdJ,WAAW,MAInB,KAAKP,EACH,MAAO,CACHiB,MAAO,YAAIE,EAAMF,OAAOuB,QAAO,SAACC,EAAEtC,GAAH,OAAaA,IAAUoC,EAAO5B,YAGnE,KAAKX,EACD,MAAO,CACHiB,MAAO,YAAIE,EAAMF,OAAOY,KAAI,SAACa,EAAMvC,GAC/B,IAAMwC,EAAO,eAAOD,GAIpB,OAHGvC,IAAUoC,EAAO5B,UAChBgC,EAAQpC,WAAaoC,EAAQpC,WAE1BoC,MAInB,QACE,OAAOxB,KDhC6BiB,GEG1CQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,QAGJU,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5d99016.chunk.js","sourcesContent":["export const actionsTypes = {\n  ADD_TODO: '[Todo] Add',\n  REMOVE_TODO: '[Todo] Remove',\n  TOGGLE_COMPLETED: '[Todo] Toggle completed',\n};\n\nexport const addTodo = (label) => ({\n  type: actionsTypes.ADD_TODO,\n  payload: label,\n});\n\nexport const removeTodo = (index) => ({\n  type: actionsTypes.REMOVE_TODO,\n  payload: index,\n});\n\nexport const toggleCompleted = (index) => ({\n  type: actionsTypes.TOGGLE_COMPLETED,\n  payload: index,\n});\n","import React from 'react';\nimport { toggleCompleted, removeTodo } from './+state/actions';\nimport { useDispatch } from 'react-redux';\nexport function TodoItem({todo, index}) {\n    const dispatch = useDispatch();\n    return <div className=\"flex mb-4 items-center\">\n      <p className={`${todo.completed ? 'line-through text-green-500' : 'text-grey-800'} w-full `}>{todo.label}</p>\n      <button onClick={() => dispatch(toggleCompleted(index))} className={`flex-no-shrink p-2 ml-4 mr-2 border-2 rounded hover:text-green-100 text-green-500 border-green-500 hover:bg-green-500`}>\n        {!todo.completed ? 'Done' : 'Undone'}\n      </button>\n      <button onClick={() => dispatch(removeTodo(index))} className=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red-500 border-red-500 hover:text-red-100 hover:bg-red-500\">\n            Remove\n      </button>\n    </div>;\n  }","import React, { createRef } from 'react';\nimport './tailwind.generated.css';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTodo } from './+state/actions';\nimport { TodoItem } from './TodoItem';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const ref = createRef();\n  /**\n   * @type {{label: string, completed: boolean}[]} todos The todos\n   */\n  const todos = useSelector((state) => state.todos);\n\n  /**\n   * on Add item\n   * @param {React.FormEvent<HTMLButtonElement>} event The submit event\n   */\n  function addTodoItem(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    dispatch(addTodo(ref.current.value));\n    ref.current.value = '';\n    return false;\n  }\n  return (\n    <div className=\"\">\n      <div className=\"h-100 w-full flex items-center justify-center bg-teal-lightest font-sans\">\n        <div className=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n          <div className=\"mb-4\">\n            <h1 className=\"text-grey-darkest\">Todo List</h1>\n            <form onSubmit={addTodoItem} className=\"flex mt-4\">\n              <input\n                ref={ref}\n                data-testid=\"todo-input\"\n                required\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-800\"\n                placeholder=\"Add Todo\"\n              />\n              <button\n                type=\"submit\"\n                className=\"flex-no-shrink p-2 border-2 rounded text-teal-500 border-teal-500 hover:text-teal-800 hover:bg-teal-500\"\n              >\n                Add\n              </button>\n            </form>\n          </div>\n          <div>\n            {todos.map((todo, index) => {\n              return <TodoItem key={todo.label + index} todo={todo} index={index} />\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initailState = {\n    todos: [\n        \n        // {\n        //     label: 'First Todo item',\n        //     completed: false\n        // }\n        \n    ]\n}","import { createStore } from 'redux';\nimport { reducer } from './reducer';\nimport {initailState} from './state';\n\nexport const store = createStore(reducer, initailState);\n","import { initailState } from './state';\nimport { actionsTypes } from './actions';\n/**\n * The root reducer.\n * @param {{todos: {label: string, completed: boolean}[]}} state The state\n * @param {{type: string, payload: any}} action The action\n */\nexport function reducer(state = initailState, action) {\n  switch (action.type) {\n    case actionsTypes.ADD_TODO:\n      return {\n        todos: [\n          ...state.todos,\n          {\n            label: action.payload,\n            completed: false,\n          },\n        ],\n      };\n    case actionsTypes.REMOVE_TODO:\n      return {\n          todos: [...state.todos].filter((_,index) => index !== action.payload)\n      };\n    \n    case actionsTypes.TOGGLE_COMPLETED:\n        return {\n            todos: [...state.todos].map((item, index) => {\n                const newItem = {...item};\n                if(index === action.payload){\n                    newItem.completed = !newItem.completed;\n                }\n                return newItem;\n            })\n        }\n\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './+state/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}